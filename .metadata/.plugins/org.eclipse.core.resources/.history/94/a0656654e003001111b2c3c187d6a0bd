package com.bsiag.smartfield.server.services.lookup;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.queryParser.MultiFieldQueryParser;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.SimpleFSDirectory;
import org.apache.lucene.util.Version;
import org.eclipse.scout.commons.BundleContextUtility;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.commons.logger.IScoutLogger;
import org.eclipse.scout.commons.logger.ScoutLogManager;
import org.eclipse.scout.rt.server.services.lookup.AbstractLookupService;
import org.eclipse.scout.rt.shared.services.lookup.LookupCall;
import org.eclipse.scout.rt.shared.services.lookup.LookupRow;
import org.osgi.framework.ServiceRegistration;

import com.bsiag.smartfield.shared.services.lookup.ICityLookupService;

public class CityLookupService extends AbstractLookupService implements ICityLookupService {
  private static final IScoutLogger LOG = ScoutLogManager.getLogger(CityLookupService.class);

  private IndexSearcher searcher;
  private QueryParser queryParser;

  @Override
  public void initializeService(ServiceRegistration registration) {
    super.initializeService(registration);

    String path = BundleContextUtility.resolve("${workspace_loc}/com.bsiag.smartfield.server/resources/index");
    try {
      Directory index = new SimpleFSDirectory(new File(path));
      searcher = new IndexSearcher(index);
      queryParser = new MultiFieldQueryParser(Version.LUCENE_34, new String[]{"zip", "city"}, new StandardAnalyzer(Version.LUCENE_34));
    }
    catch (IOException e) {
      LOG.error(e.getMessage(), e);
    }
  }

  public LookupRow[] getDataByKey(LookupCall call) throws ProcessingException {
    return null;
  }

  public LookupRow[] getDataByText(LookupCall call) throws ProcessingException {
    try {
      Query query = queryParser.parse(call.getText());

      TopScoreDocCollector collector = TopScoreDocCollector.create(call.getMaxRowCount(), true);
      searcher.search(query, collector);
      ScoreDoc[] hits = collector.topDocs().scoreDocs;

      List<LookupRow> rows = new ArrayList<LookupRow>();
      for (int i = 0; i < hits.length; ++i) {
        int docId = hits[i].doc;
        Document d = searcher.doc(docId);
        rows.add(new LookupRow(d.get("key"), d.get("zip") + " " + d.get("city")));
      }
      return rows.toArray(new LookupRow[rows.size()]);
    }
    catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }

    return null;
  }

  public LookupRow[] getDataByAll(LookupCall call) throws ProcessingException {
    return null;
  }

  public LookupRow[] getDataByRec(LookupCall call) throws ProcessingException {
    return null;
  }
}
